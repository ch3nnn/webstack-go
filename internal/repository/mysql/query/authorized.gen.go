// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ch3nnn/webstack-go/internal/repository/mysql/model"
)

func newAuthorized(db *gorm.DB, opts ...gen.DOOption) authorized {
	_authorized := authorized{}

	_authorized.authorizedDo.UseDB(db, opts...)
	_authorized.authorizedDo.UseModel(&model.Authorized{})

	tableName := _authorized.authorizedDo.TableName()
	_authorized.ALL = field.NewAsterisk(tableName)
	_authorized.ID = field.NewInt64(tableName, "id")
	_authorized.BusinessKey = field.NewString(tableName, "business_key")
	_authorized.BusinessSecret = field.NewString(tableName, "business_secret")
	_authorized.BusinessDeveloper = field.NewString(tableName, "business_developer")
	_authorized.Remark = field.NewString(tableName, "remark")
	_authorized.IsUsed = field.NewInt64(tableName, "is_used")
	_authorized.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_authorized.CreatedAt = field.NewTime(tableName, "created_at")
	_authorized.CreatedUser = field.NewString(tableName, "created_user")
	_authorized.UpdatedAt = field.NewTime(tableName, "updated_at")
	_authorized.UpdatedUser = field.NewString(tableName, "updated_user")

	_authorized.fillFieldMap()

	return _authorized
}

type authorized struct {
	authorizedDo

	ALL               field.Asterisk
	ID                field.Int64  // 主键
	BusinessKey       field.String // 调用方key
	BusinessSecret    field.String // 调用方secret
	BusinessDeveloper field.String // 调用方对接人
	Remark            field.String // 备注
	IsUsed            field.Int64  // 是否启用 1:是  -1:否
	IsDeleted         field.Int64  // 是否删除 1:是  -1:否
	CreatedAt         field.Time   // 创建时间
	CreatedUser       field.String // 创建人
	UpdatedAt         field.Time   // 更新时间
	UpdatedUser       field.String // 更新人

	fieldMap map[string]field.Expr
}

func (a authorized) Table(newTableName string) *authorized {
	a.authorizedDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a authorized) As(alias string) *authorized {
	a.authorizedDo.DO = *(a.authorizedDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *authorized) updateTableName(table string) *authorized {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.BusinessKey = field.NewString(table, "business_key")
	a.BusinessSecret = field.NewString(table, "business_secret")
	a.BusinessDeveloper = field.NewString(table, "business_developer")
	a.Remark = field.NewString(table, "remark")
	a.IsUsed = field.NewInt64(table, "is_used")
	a.IsDeleted = field.NewInt64(table, "is_deleted")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.CreatedUser = field.NewString(table, "created_user")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.UpdatedUser = field.NewString(table, "updated_user")

	a.fillFieldMap()

	return a
}

func (a *authorized) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *authorized) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["business_key"] = a.BusinessKey
	a.fieldMap["business_secret"] = a.BusinessSecret
	a.fieldMap["business_developer"] = a.BusinessDeveloper
	a.fieldMap["remark"] = a.Remark
	a.fieldMap["is_used"] = a.IsUsed
	a.fieldMap["is_deleted"] = a.IsDeleted
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["created_user"] = a.CreatedUser
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["updated_user"] = a.UpdatedUser
}

func (a authorized) clone(db *gorm.DB) authorized {
	a.authorizedDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a authorized) replaceDB(db *gorm.DB) authorized {
	a.authorizedDo.ReplaceDB(db)
	return a
}

type authorizedDo struct{ gen.DO }

type IAuthorizedDo interface {
	gen.SubQuery
	Debug() IAuthorizedDo
	WithContext(ctx context.Context) IAuthorizedDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAuthorizedDo
	WriteDB() IAuthorizedDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAuthorizedDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAuthorizedDo
	Not(conds ...gen.Condition) IAuthorizedDo
	Or(conds ...gen.Condition) IAuthorizedDo
	Select(conds ...field.Expr) IAuthorizedDo
	Where(conds ...gen.Condition) IAuthorizedDo
	Order(conds ...field.Expr) IAuthorizedDo
	Distinct(cols ...field.Expr) IAuthorizedDo
	Omit(cols ...field.Expr) IAuthorizedDo
	Join(table schema.Tabler, on ...field.Expr) IAuthorizedDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAuthorizedDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAuthorizedDo
	Group(cols ...field.Expr) IAuthorizedDo
	Having(conds ...gen.Condition) IAuthorizedDo
	Limit(limit int) IAuthorizedDo
	Offset(offset int) IAuthorizedDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthorizedDo
	Unscoped() IAuthorizedDo
	Create(values ...*model.Authorized) error
	CreateInBatches(values []*model.Authorized, batchSize int) error
	Save(values ...*model.Authorized) error
	First() (*model.Authorized, error)
	Take() (*model.Authorized, error)
	Last() (*model.Authorized, error)
	Find() ([]*model.Authorized, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Authorized, err error)
	FindInBatches(result *[]*model.Authorized, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Authorized) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAuthorizedDo
	Assign(attrs ...field.AssignExpr) IAuthorizedDo
	Joins(fields ...field.RelationField) IAuthorizedDo
	Preload(fields ...field.RelationField) IAuthorizedDo
	FirstOrInit() (*model.Authorized, error)
	FirstOrCreate() (*model.Authorized, error)
	FindByPage(offset int, limit int) (result []*model.Authorized, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAuthorizedDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a authorizedDo) Debug() IAuthorizedDo {
	return a.withDO(a.DO.Debug())
}

func (a authorizedDo) WithContext(ctx context.Context) IAuthorizedDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a authorizedDo) ReadDB() IAuthorizedDo {
	return a.Clauses(dbresolver.Read)
}

func (a authorizedDo) WriteDB() IAuthorizedDo {
	return a.Clauses(dbresolver.Write)
}

func (a authorizedDo) Session(config *gorm.Session) IAuthorizedDo {
	return a.withDO(a.DO.Session(config))
}

func (a authorizedDo) Clauses(conds ...clause.Expression) IAuthorizedDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a authorizedDo) Returning(value interface{}, columns ...string) IAuthorizedDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a authorizedDo) Not(conds ...gen.Condition) IAuthorizedDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a authorizedDo) Or(conds ...gen.Condition) IAuthorizedDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a authorizedDo) Select(conds ...field.Expr) IAuthorizedDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a authorizedDo) Where(conds ...gen.Condition) IAuthorizedDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a authorizedDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAuthorizedDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a authorizedDo) Order(conds ...field.Expr) IAuthorizedDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a authorizedDo) Distinct(cols ...field.Expr) IAuthorizedDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a authorizedDo) Omit(cols ...field.Expr) IAuthorizedDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a authorizedDo) Join(table schema.Tabler, on ...field.Expr) IAuthorizedDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a authorizedDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAuthorizedDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a authorizedDo) RightJoin(table schema.Tabler, on ...field.Expr) IAuthorizedDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a authorizedDo) Group(cols ...field.Expr) IAuthorizedDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a authorizedDo) Having(conds ...gen.Condition) IAuthorizedDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a authorizedDo) Limit(limit int) IAuthorizedDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a authorizedDo) Offset(offset int) IAuthorizedDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a authorizedDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAuthorizedDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a authorizedDo) Unscoped() IAuthorizedDo {
	return a.withDO(a.DO.Unscoped())
}

func (a authorizedDo) Create(values ...*model.Authorized) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a authorizedDo) CreateInBatches(values []*model.Authorized, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a authorizedDo) Save(values ...*model.Authorized) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a authorizedDo) First() (*model.Authorized, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Authorized), nil
	}
}

func (a authorizedDo) Take() (*model.Authorized, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Authorized), nil
	}
}

func (a authorizedDo) Last() (*model.Authorized, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Authorized), nil
	}
}

func (a authorizedDo) Find() ([]*model.Authorized, error) {
	result, err := a.DO.Find()
	return result.([]*model.Authorized), err
}

func (a authorizedDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Authorized, err error) {
	buf := make([]*model.Authorized, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a authorizedDo) FindInBatches(result *[]*model.Authorized, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a authorizedDo) Attrs(attrs ...field.AssignExpr) IAuthorizedDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a authorizedDo) Assign(attrs ...field.AssignExpr) IAuthorizedDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a authorizedDo) Joins(fields ...field.RelationField) IAuthorizedDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a authorizedDo) Preload(fields ...field.RelationField) IAuthorizedDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a authorizedDo) FirstOrInit() (*model.Authorized, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Authorized), nil
	}
}

func (a authorizedDo) FirstOrCreate() (*model.Authorized, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Authorized), nil
	}
}

func (a authorizedDo) FindByPage(offset int, limit int) (result []*model.Authorized, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a authorizedDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a authorizedDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a authorizedDo) Delete(models ...*model.Authorized) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *authorizedDo) withDO(do gen.Dao) *authorizedDo {
	a.DO = *do.(*gen.DO)
	return a
}
