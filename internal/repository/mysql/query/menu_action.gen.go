// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ch3nnn/webstack-go/internal/repository/mysql/model"
)

func newMenuAction(db *gorm.DB, opts ...gen.DOOption) menuAction {
	_menuAction := menuAction{}

	_menuAction.menuActionDo.UseDB(db, opts...)
	_menuAction.menuActionDo.UseModel(&model.MenuAction{})

	tableName := _menuAction.menuActionDo.TableName()
	_menuAction.ALL = field.NewAsterisk(tableName)
	_menuAction.ID = field.NewInt64(tableName, "id")
	_menuAction.MenuID = field.NewInt64(tableName, "menu_id")
	_menuAction.Method = field.NewString(tableName, "method")
	_menuAction.API = field.NewString(tableName, "api")
	_menuAction.IsDeleted = field.NewInt64(tableName, "is_deleted")
	_menuAction.CreatedAt = field.NewTime(tableName, "created_at")
	_menuAction.CreatedUser = field.NewString(tableName, "created_user")
	_menuAction.UpdatedAt = field.NewTime(tableName, "updated_at")
	_menuAction.UpdatedUser = field.NewString(tableName, "updated_user")

	_menuAction.fillFieldMap()

	return _menuAction
}

type menuAction struct {
	menuActionDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	MenuID      field.Int64  // 菜单栏ID
	Method      field.String // 请求方式
	API         field.String // 请求地址
	IsDeleted   field.Int64  // 是否删除 1:是  -1:否
	CreatedAt   field.Time   // 创建时间
	CreatedUser field.String // 创建人
	UpdatedAt   field.Time   // 更新时间
	UpdatedUser field.String // 更新人

	fieldMap map[string]field.Expr
}

func (m menuAction) Table(newTableName string) *menuAction {
	m.menuActionDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m menuAction) As(alias string) *menuAction {
	m.menuActionDo.DO = *(m.menuActionDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *menuAction) updateTableName(table string) *menuAction {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.MenuID = field.NewInt64(table, "menu_id")
	m.Method = field.NewString(table, "method")
	m.API = field.NewString(table, "api")
	m.IsDeleted = field.NewInt64(table, "is_deleted")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.CreatedUser = field.NewString(table, "created_user")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.UpdatedUser = field.NewString(table, "updated_user")

	m.fillFieldMap()

	return m
}

func (m *menuAction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *menuAction) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 9)
	m.fieldMap["id"] = m.ID
	m.fieldMap["menu_id"] = m.MenuID
	m.fieldMap["method"] = m.Method
	m.fieldMap["api"] = m.API
	m.fieldMap["is_deleted"] = m.IsDeleted
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["created_user"] = m.CreatedUser
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["updated_user"] = m.UpdatedUser
}

func (m menuAction) clone(db *gorm.DB) menuAction {
	m.menuActionDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m menuAction) replaceDB(db *gorm.DB) menuAction {
	m.menuActionDo.ReplaceDB(db)
	return m
}

type menuActionDo struct{ gen.DO }

type IMenuActionDo interface {
	gen.SubQuery
	Debug() IMenuActionDo
	WithContext(ctx context.Context) IMenuActionDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMenuActionDo
	WriteDB() IMenuActionDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMenuActionDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMenuActionDo
	Not(conds ...gen.Condition) IMenuActionDo
	Or(conds ...gen.Condition) IMenuActionDo
	Select(conds ...field.Expr) IMenuActionDo
	Where(conds ...gen.Condition) IMenuActionDo
	Order(conds ...field.Expr) IMenuActionDo
	Distinct(cols ...field.Expr) IMenuActionDo
	Omit(cols ...field.Expr) IMenuActionDo
	Join(table schema.Tabler, on ...field.Expr) IMenuActionDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMenuActionDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMenuActionDo
	Group(cols ...field.Expr) IMenuActionDo
	Having(conds ...gen.Condition) IMenuActionDo
	Limit(limit int) IMenuActionDo
	Offset(offset int) IMenuActionDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuActionDo
	Unscoped() IMenuActionDo
	Create(values ...*model.MenuAction) error
	CreateInBatches(values []*model.MenuAction, batchSize int) error
	Save(values ...*model.MenuAction) error
	First() (*model.MenuAction, error)
	Take() (*model.MenuAction, error)
	Last() (*model.MenuAction, error)
	Find() ([]*model.MenuAction, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuAction, err error)
	FindInBatches(result *[]*model.MenuAction, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MenuAction) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMenuActionDo
	Assign(attrs ...field.AssignExpr) IMenuActionDo
	Joins(fields ...field.RelationField) IMenuActionDo
	Preload(fields ...field.RelationField) IMenuActionDo
	FirstOrInit() (*model.MenuAction, error)
	FirstOrCreate() (*model.MenuAction, error)
	FindByPage(offset int, limit int) (result []*model.MenuAction, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMenuActionDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m menuActionDo) Debug() IMenuActionDo {
	return m.withDO(m.DO.Debug())
}

func (m menuActionDo) WithContext(ctx context.Context) IMenuActionDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m menuActionDo) ReadDB() IMenuActionDo {
	return m.Clauses(dbresolver.Read)
}

func (m menuActionDo) WriteDB() IMenuActionDo {
	return m.Clauses(dbresolver.Write)
}

func (m menuActionDo) Session(config *gorm.Session) IMenuActionDo {
	return m.withDO(m.DO.Session(config))
}

func (m menuActionDo) Clauses(conds ...clause.Expression) IMenuActionDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m menuActionDo) Returning(value interface{}, columns ...string) IMenuActionDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m menuActionDo) Not(conds ...gen.Condition) IMenuActionDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m menuActionDo) Or(conds ...gen.Condition) IMenuActionDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m menuActionDo) Select(conds ...field.Expr) IMenuActionDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m menuActionDo) Where(conds ...gen.Condition) IMenuActionDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m menuActionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IMenuActionDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m menuActionDo) Order(conds ...field.Expr) IMenuActionDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m menuActionDo) Distinct(cols ...field.Expr) IMenuActionDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m menuActionDo) Omit(cols ...field.Expr) IMenuActionDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m menuActionDo) Join(table schema.Tabler, on ...field.Expr) IMenuActionDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m menuActionDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMenuActionDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m menuActionDo) RightJoin(table schema.Tabler, on ...field.Expr) IMenuActionDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m menuActionDo) Group(cols ...field.Expr) IMenuActionDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m menuActionDo) Having(conds ...gen.Condition) IMenuActionDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m menuActionDo) Limit(limit int) IMenuActionDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m menuActionDo) Offset(offset int) IMenuActionDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m menuActionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMenuActionDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m menuActionDo) Unscoped() IMenuActionDo {
	return m.withDO(m.DO.Unscoped())
}

func (m menuActionDo) Create(values ...*model.MenuAction) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m menuActionDo) CreateInBatches(values []*model.MenuAction, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m menuActionDo) Save(values ...*model.MenuAction) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m menuActionDo) First() (*model.MenuAction, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAction), nil
	}
}

func (m menuActionDo) Take() (*model.MenuAction, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAction), nil
	}
}

func (m menuActionDo) Last() (*model.MenuAction, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAction), nil
	}
}

func (m menuActionDo) Find() ([]*model.MenuAction, error) {
	result, err := m.DO.Find()
	return result.([]*model.MenuAction), err
}

func (m menuActionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MenuAction, err error) {
	buf := make([]*model.MenuAction, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m menuActionDo) FindInBatches(result *[]*model.MenuAction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m menuActionDo) Attrs(attrs ...field.AssignExpr) IMenuActionDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m menuActionDo) Assign(attrs ...field.AssignExpr) IMenuActionDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m menuActionDo) Joins(fields ...field.RelationField) IMenuActionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m menuActionDo) Preload(fields ...field.RelationField) IMenuActionDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m menuActionDo) FirstOrInit() (*model.MenuAction, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAction), nil
	}
}

func (m menuActionDo) FirstOrCreate() (*model.MenuAction, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MenuAction), nil
	}
}

func (m menuActionDo) FindByPage(offset int, limit int) (result []*model.MenuAction, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m menuActionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m menuActionDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m menuActionDo) Delete(models ...*model.MenuAction) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *menuActionDo) withDO(do gen.Dao) *menuActionDo {
	m.DO = *do.(*gen.DO)
	return m
}
