// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/ch3nnn/webstack-go/internal/repository/mysql/model"
)

func newAdminMenu(db *gorm.DB, opts ...gen.DOOption) adminMenu {
	_adminMenu := adminMenu{}

	_adminMenu.adminMenuDo.UseDB(db, opts...)
	_adminMenu.adminMenuDo.UseModel(&model.AdminMenu{})

	tableName := _adminMenu.adminMenuDo.TableName()
	_adminMenu.ALL = field.NewAsterisk(tableName)
	_adminMenu.ID = field.NewInt64(tableName, "id")
	_adminMenu.AdminID = field.NewInt64(tableName, "admin_id")
	_adminMenu.MenuID = field.NewInt64(tableName, "menu_id")
	_adminMenu.CreatedAt = field.NewTime(tableName, "created_at")
	_adminMenu.CreatedUser = field.NewString(tableName, "created_user")

	_adminMenu.fillFieldMap()

	return _adminMenu
}

type adminMenu struct {
	adminMenuDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	AdminID     field.Int64  // 管理员ID
	MenuID      field.Int64  // 菜单栏ID
	CreatedAt   field.Time   // 创建时间
	CreatedUser field.String // 创建人

	fieldMap map[string]field.Expr
}

func (a adminMenu) Table(newTableName string) *adminMenu {
	a.adminMenuDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a adminMenu) As(alias string) *adminMenu {
	a.adminMenuDo.DO = *(a.adminMenuDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *adminMenu) updateTableName(table string) *adminMenu {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.AdminID = field.NewInt64(table, "admin_id")
	a.MenuID = field.NewInt64(table, "menu_id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.CreatedUser = field.NewString(table, "created_user")

	a.fillFieldMap()

	return a
}

func (a *adminMenu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *adminMenu) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 5)
	a.fieldMap["id"] = a.ID
	a.fieldMap["admin_id"] = a.AdminID
	a.fieldMap["menu_id"] = a.MenuID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["created_user"] = a.CreatedUser
}

func (a adminMenu) clone(db *gorm.DB) adminMenu {
	a.adminMenuDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a adminMenu) replaceDB(db *gorm.DB) adminMenu {
	a.adminMenuDo.ReplaceDB(db)
	return a
}

type adminMenuDo struct{ gen.DO }

type IAdminMenuDo interface {
	gen.SubQuery
	Debug() IAdminMenuDo
	WithContext(ctx context.Context) IAdminMenuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAdminMenuDo
	WriteDB() IAdminMenuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAdminMenuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAdminMenuDo
	Not(conds ...gen.Condition) IAdminMenuDo
	Or(conds ...gen.Condition) IAdminMenuDo
	Select(conds ...field.Expr) IAdminMenuDo
	Where(conds ...gen.Condition) IAdminMenuDo
	Order(conds ...field.Expr) IAdminMenuDo
	Distinct(cols ...field.Expr) IAdminMenuDo
	Omit(cols ...field.Expr) IAdminMenuDo
	Join(table schema.Tabler, on ...field.Expr) IAdminMenuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAdminMenuDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAdminMenuDo
	Group(cols ...field.Expr) IAdminMenuDo
	Having(conds ...gen.Condition) IAdminMenuDo
	Limit(limit int) IAdminMenuDo
	Offset(offset int) IAdminMenuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminMenuDo
	Unscoped() IAdminMenuDo
	Create(values ...*model.AdminMenu) error
	CreateInBatches(values []*model.AdminMenu, batchSize int) error
	Save(values ...*model.AdminMenu) error
	First() (*model.AdminMenu, error)
	Take() (*model.AdminMenu, error)
	Last() (*model.AdminMenu, error)
	Find() ([]*model.AdminMenu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminMenu, err error)
	FindInBatches(result *[]*model.AdminMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AdminMenu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAdminMenuDo
	Assign(attrs ...field.AssignExpr) IAdminMenuDo
	Joins(fields ...field.RelationField) IAdminMenuDo
	Preload(fields ...field.RelationField) IAdminMenuDo
	FirstOrInit() (*model.AdminMenu, error)
	FirstOrCreate() (*model.AdminMenu, error)
	FindByPage(offset int, limit int) (result []*model.AdminMenu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAdminMenuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a adminMenuDo) Debug() IAdminMenuDo {
	return a.withDO(a.DO.Debug())
}

func (a adminMenuDo) WithContext(ctx context.Context) IAdminMenuDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a adminMenuDo) ReadDB() IAdminMenuDo {
	return a.Clauses(dbresolver.Read)
}

func (a adminMenuDo) WriteDB() IAdminMenuDo {
	return a.Clauses(dbresolver.Write)
}

func (a adminMenuDo) Session(config *gorm.Session) IAdminMenuDo {
	return a.withDO(a.DO.Session(config))
}

func (a adminMenuDo) Clauses(conds ...clause.Expression) IAdminMenuDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a adminMenuDo) Returning(value interface{}, columns ...string) IAdminMenuDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a adminMenuDo) Not(conds ...gen.Condition) IAdminMenuDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a adminMenuDo) Or(conds ...gen.Condition) IAdminMenuDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a adminMenuDo) Select(conds ...field.Expr) IAdminMenuDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a adminMenuDo) Where(conds ...gen.Condition) IAdminMenuDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a adminMenuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) IAdminMenuDo {
	return a.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (a adminMenuDo) Order(conds ...field.Expr) IAdminMenuDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a adminMenuDo) Distinct(cols ...field.Expr) IAdminMenuDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a adminMenuDo) Omit(cols ...field.Expr) IAdminMenuDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a adminMenuDo) Join(table schema.Tabler, on ...field.Expr) IAdminMenuDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a adminMenuDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAdminMenuDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a adminMenuDo) RightJoin(table schema.Tabler, on ...field.Expr) IAdminMenuDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a adminMenuDo) Group(cols ...field.Expr) IAdminMenuDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a adminMenuDo) Having(conds ...gen.Condition) IAdminMenuDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a adminMenuDo) Limit(limit int) IAdminMenuDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a adminMenuDo) Offset(offset int) IAdminMenuDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a adminMenuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAdminMenuDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a adminMenuDo) Unscoped() IAdminMenuDo {
	return a.withDO(a.DO.Unscoped())
}

func (a adminMenuDo) Create(values ...*model.AdminMenu) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a adminMenuDo) CreateInBatches(values []*model.AdminMenu, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a adminMenuDo) Save(values ...*model.AdminMenu) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a adminMenuDo) First() (*model.AdminMenu, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminMenu), nil
	}
}

func (a adminMenuDo) Take() (*model.AdminMenu, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminMenu), nil
	}
}

func (a adminMenuDo) Last() (*model.AdminMenu, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminMenu), nil
	}
}

func (a adminMenuDo) Find() ([]*model.AdminMenu, error) {
	result, err := a.DO.Find()
	return result.([]*model.AdminMenu), err
}

func (a adminMenuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AdminMenu, err error) {
	buf := make([]*model.AdminMenu, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a adminMenuDo) FindInBatches(result *[]*model.AdminMenu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a adminMenuDo) Attrs(attrs ...field.AssignExpr) IAdminMenuDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a adminMenuDo) Assign(attrs ...field.AssignExpr) IAdminMenuDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a adminMenuDo) Joins(fields ...field.RelationField) IAdminMenuDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a adminMenuDo) Preload(fields ...field.RelationField) IAdminMenuDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a adminMenuDo) FirstOrInit() (*model.AdminMenu, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminMenu), nil
	}
}

func (a adminMenuDo) FirstOrCreate() (*model.AdminMenu, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AdminMenu), nil
	}
}

func (a adminMenuDo) FindByPage(offset int, limit int) (result []*model.AdminMenu, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a adminMenuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a adminMenuDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a adminMenuDo) Delete(models ...*model.AdminMenu) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *adminMenuDo) withDO(do gen.Dao) *adminMenuDo {
	a.DO = *do.(*gen.DO)
	return a
}
