// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q             = new(Query)
	Admin         *admin
	AdminMenu     *adminMenu
	Authorized    *authorized
	AuthorizedAPI *authorizedAPI
	Category      *category
	CronTask      *cronTask
	Menu          *menu
	MenuAction    *menuAction
	Site          *site
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Admin = &Q.Admin
	AdminMenu = &Q.AdminMenu
	Authorized = &Q.Authorized
	AuthorizedAPI = &Q.AuthorizedAPI
	Category = &Q.Category
	CronTask = &Q.CronTask
	Menu = &Q.Menu
	MenuAction = &Q.MenuAction
	Site = &Q.Site
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:            db,
		Admin:         newAdmin(db, opts...),
		AdminMenu:     newAdminMenu(db, opts...),
		Authorized:    newAuthorized(db, opts...),
		AuthorizedAPI: newAuthorizedAPI(db, opts...),
		Category:      newCategory(db, opts...),
		CronTask:      newCronTask(db, opts...),
		Menu:          newMenu(db, opts...),
		MenuAction:    newMenuAction(db, opts...),
		Site:          newSite(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Admin         admin
	AdminMenu     adminMenu
	Authorized    authorized
	AuthorizedAPI authorizedAPI
	Category      category
	CronTask      cronTask
	Menu          menu
	MenuAction    menuAction
	Site          site
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Admin:         q.Admin.clone(db),
		AdminMenu:     q.AdminMenu.clone(db),
		Authorized:    q.Authorized.clone(db),
		AuthorizedAPI: q.AuthorizedAPI.clone(db),
		Category:      q.Category.clone(db),
		CronTask:      q.CronTask.clone(db),
		Menu:          q.Menu.clone(db),
		MenuAction:    q.MenuAction.clone(db),
		Site:          q.Site.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:            db,
		Admin:         q.Admin.replaceDB(db),
		AdminMenu:     q.AdminMenu.replaceDB(db),
		Authorized:    q.Authorized.replaceDB(db),
		AuthorizedAPI: q.AuthorizedAPI.replaceDB(db),
		Category:      q.Category.replaceDB(db),
		CronTask:      q.CronTask.replaceDB(db),
		Menu:          q.Menu.replaceDB(db),
		MenuAction:    q.MenuAction.replaceDB(db),
		Site:          q.Site.replaceDB(db),
	}
}

type queryCtx struct {
	Admin         IAdminDo
	AdminMenu     IAdminMenuDo
	Authorized    IAuthorizedDo
	AuthorizedAPI IAuthorizedAPIDo
	Category      ICategoryDo
	CronTask      ICronTaskDo
	Menu          IMenuDo
	MenuAction    IMenuActionDo
	Site          ISiteDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Admin:         q.Admin.WithContext(ctx),
		AdminMenu:     q.AdminMenu.WithContext(ctx),
		Authorized:    q.Authorized.WithContext(ctx),
		AuthorizedAPI: q.AuthorizedAPI.WithContext(ctx),
		Category:      q.Category.WithContext(ctx),
		CronTask:      q.CronTask.WithContext(ctx),
		Menu:          q.Menu.WithContext(ctx),
		MenuAction:    q.MenuAction.WithContext(ctx),
		Site:          q.Site.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
